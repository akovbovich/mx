%TITLE 'PARSE_CONF_LINE'
MODULE PARSE_CONF_LINE (IDENT='V1.1',
    	ADDRESSING_MODE (EXTERNAL=LONG_RELATIVE, NONEXTERNAL=LONG_RELATIVE)) =
BEGIN
!++
! FACILITY: 	    MX MLF
!
! ABSTRACT: 	    Parses mailing-list processor commands.
!
! MODULE DESCRIPTION:
!
!
! AUTHOR:   	    M. Madison
!
! Copyright (c) 2008, Matthew Madison.
! 
! All rights reserved.
! 
! Redistribution and use in source and binary forms, with or without
! modification, are permitted provided that the following conditions
! are met:
! 
!     * Redistributions of source code must retain the above
!       copyright notice, this list of conditions and the following
!       disclaimer.
!     * Redistributions in binary form must reproduce the above
!       copyright notice, this list of conditions and the following
!       disclaimer in the documentation and/or other materials provided
!       with the distribution.
!     * Neither the name of the copyright owner nor the names of any
!       other contributors may be used to endorse or promote products
!       derived from this software without specific prior written
!       permission.
! 
! THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
! "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
! LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
! A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
! OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
! SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
! LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
! DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
! THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
! (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
! OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
!
! CREATION DATE:    25-OCT-1991
!
! MODIFICATION HISTORY:
!
!   25-OCT-1991	V1.0	Madison	    Initial coding (swiped from SMTP).
!   10-MAR-1993 V1.1	Goatley     Modified for AXP.
!--

    LIBRARY 'SYS$LIBRARY:STARLET';
    LIBRARY 'SYS$LIBRARY:TPAMAC';
    LIBRARY 'MX_SRC_COMMON:MX';
    LIBRARY 'MLF';

    FORWARD ROUTINE
    	PARSE_CONF_LINE,
    	PCL_STORE;

    EXTERNAL ROUTINE
    	G_HAT (LIB$TPARSE, STR$UPCASE, STR$COPY_R, STR$COPY_DX, STR$APPEND);

    MACRO
    	TPA_A_P1    	=   TPA$C_LENGTH0+00,0,32,0%,
    	TPA_A_P2    	=   TPA$C_LENGTH0+04,0,32,0%,
    	TPA_A_P3    	=   TPA$C_LENGTH0+08,0,32,0%,
    	TPA_A_P4    	=   TPA$C_LENGTH0+12,0,32,0%;

%SBTTL 'State table for PARSE_CONF_LINE'

    $INIT_STATE (PCL_STATE, PCL_KEY);

    $STATE (PCL_START,
    	('{', PCL_VARNAME, PCL_STORE,,, 1),
    	(TPA$_EOS, TPA$_EXIT),
    	(TPA$_ANY, PCL_START, PCL_STORE,,, 2));
    $STATE (PCL_VARNAME,
    	('}', PCL_START, PCL_STORE,,, 3),
    	(TPA$_EOS, TPA$_EXIT, PCL_STORE,,, 4),
    	(TPA$_ANY, PCL_VARNAME, PCL_STORE,,, 5));

%SBTTL 'PARSE_CONF_LINE'
GLOBAL ROUTINE PARSE_CONF_LINE (IN_A, VARLST_A, OUT_A) =
BEGIN
!++
! FUNCTIONAL DESCRIPTION:
!
!   Parses a line from a mailing list confirmation message, performing
!   variable substitution when needed.
!
! RETURNS:  	cond_value, longword (unsigned), write only, by value
!
! PROTOTYPE:
!
!   PARSE_CONF_LINE  in, varlst, out
!
! IMPLICIT INPUTS:  None.
!
! IMPLICIT OUTPUTS: None.
!
! COMPLETION CODES:
!
!   SS$_NORMAL:	    	normal successful completion.
!
! SIDE EFFECTS:
!
!   None.
!--
    BIND
    	IN  	= .IN_A	    : BLOCK [DSC$K_S_BLN,BYTE];

    LITERAL
    	TPA_C_LENGTH	=   TPA$C_LENGTH0 + 12,
    	TPA_K_COUNT 	=   TPA$K_COUNT0 + 3;

    LOCAL
    	TPABLK	: BLOCK [TPA_C_LENGTH,BYTE],
    	TMP 	: BLOCK [DSC$K_S_BLN,BYTE],
    	STATUS;

    STR$COPY_DX (.OUT_A, %ASCID'');
    INIT_DYNDESC (TMP);
    TPABLK [TPA$L_COUNT] = TPA_K_COUNT;
    TPABLK [TPA$L_OPTIONS] = TPA$M_BLANKS;
    TPABLK [TPA$L_STRINGCNT] = .IN [DSC$W_LENGTH];
    TPABLK [TPA$L_STRINGPTR] = .IN [DSC$A_POINTER];
    TPABLK [TPA_A_P1] = .VARLST_A;
    TPABLK [TPA_A_P2] = .OUT_A;
    TPABLK [TPA_A_P3] = TMP;

    LIB$TPARSE (TPABLK, PCL_STATE, PCL_KEY)

END; ! PARSE_CONF_LINE

%SBTTL 'PCL_STORE'
TPA_ROUTINE (PCL_STORE, (OPTIONS, STRINGCNT, STRINGPTR, TOKENCNT,
    	    TOKENPTR, CHAR, NUMBER, PARAM, VARLST_A, OUT_A, TMP_A))
!++
! FUNCTIONAL DESCRIPTION:
!
!   Invoked by TPARSE to store stuff.
!
! RETURNS:  	cond_value, longword (unsigned), write only, by value
!
! PROTOTYPE:
!
!   PCL_STORE opt, scnt, sptr, tcnt, tptr, chr, num, par, p1, p2
!
! IMPLICIT INPUTS:  None.
!
! IMPLICIT OUTPUTS: None.
!
! COMPLETION CODES:
!
!   SS$_NORMAL:	    	normal successful completion.
!
! SIDE EFFECTS:
!
!   None.
!--
    BIND
    	OUT 	= .OUT_A    	: BLOCK [DSC$K_S_BLN,BYTE],
    	TMP 	= .TMP_A    	: BLOCK [DSC$K_S_BLN,BYTE],
    	VARLST	= .VARLST_A 	: QUEDEF;

    LOCAL
    	V   	: REF VARDEF,
    	STR 	: BLOCK [DSC$K_S_BLN,BYTE],
    	CHR 	: BLOCK [DSC$K_S_BLN,BYTE] PRESET (
    	    	    [DSC$B_DTYPE]   = DSC$K_DTYPE_T,
    	    	    [DSC$B_CLASS]   = DSC$K_CLASS_S,
    	    	    [DSC$W_LENGTH]  = 1,
    	    	    [DSC$A_POINTER] = CHAR);

    CASE .PARAM FROM 1 TO 5 OF
    SET

    [1]	    : STR$COPY_DX (TMP, CHR);

    [2]	    : STR$APPEND (OUT, CHR);

    [3,4]   :
    	    BEGIN
    	    	IF .PARAM EQL 3 THEN
    	    	BEGIN
    	    	    INIT_DYNDESC (STR);
    	    	    STR$APPEND (TMP, CHR);
    	    	    STR$UPCASE (STR, TMP);
    	    	    V = .VARLST [QUE_L_HEAD];
    	    	    WHILE .V NEQA VARLST DO
    	    	    BEGIN
    	    	    	IF CH$EQL (.V [VAR_W_NAME], V [VAR_T_NAME],
    	    	    	    MIN (VAR_S_NAME, .STR [DSC$W_LENGTH]),
    	    	    	    .STR [DSC$A_POINTER], %C' ')
    	    	    	THEN
    	    	    	BEGIN
    	    	    	    STR$COPY_R (TMP, V [VAR_W_VALUE], V [VAR_T_VALUE]);
    	    	    	    EXITLOOP;
    	    	    	END;
    	    	    	V = .V [VAR_L_FLINK];
    	    	    END;
    	    	    FREE_STRINGS (STR);
    	    	END;
    	    	STR$APPEND (OUT, TMP);
    	    	FREE_STRINGS (TMP);
    	    END;

    [5]	    : STR$APPEND (TMP, CHR);

    TES;

    SS$_NORMAL

END; ! PCL_STORE

END
ELUDOM
