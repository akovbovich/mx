%TITLE 'MLIST_REQUEST'
MODULE MLIST_REQUEST (IDENT='V1.7-1',
    	ADDRESSING_MODE (EXTERNAL=LONG_RELATIVE, NONEXTERNAL=LONG_RELATIVE)) =
BEGIN
!++
! FACILITY: 	    MX_MLF
!
! ABSTRACT: 	    Routines for -REQUEST list control commands.
!
! MODULE DESCRIPTION:
!
!   This module contains routines for handling mailing lists.
!
! AUTHOR:   	    M. Madison
!
! Copyright (c) 2008, Matthew Madison.
! 
! All rights reserved.
! 
! Redistribution and use in source and binary forms, with or without
! modification, are permitted provided that the following conditions
! are met:
! 
!     * Redistributions of source code must retain the above
!       copyright notice, this list of conditions and the following
!       disclaimer.
!     * Redistributions in binary form must reproduce the above
!       copyright notice, this list of conditions and the following
!       disclaimer in the documentation and/or other materials provided
!       with the distribution.
!     * Neither the name of the copyright owner nor the names of any
!       other contributors may be used to endorse or promote products
!       derived from this software without specific prior written
!       permission.
! 
! THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
! "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
! LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
! A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
! OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
! SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
! LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
! DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
! THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
! (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
! OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
!
! CREATION DATE:    25-OCT-1991
!
! MODIFICATION HISTORY:
!
!   25-OCT-1991	V1.0	Madison	    Initial coding (from MX_LOCAL).
!   04-NOV-1991	V1.0-1	Madison	    Wasn't closing MSG_TEXT file.
!   21-NOV-1991	V1.0-2	Madison	    FROMADR getting freed at wrong point.
!   04-DEC-1991	V1.1	Madison	    Handle source routed froms better.
!   05-MAR-1992	V1.2	Madison	    New MLE flags.
!   28-Oct-1992 V1.3	Munroe	    Add quit command.
!   10-FEB-1994 V1.4	Goatley     Modify to work with FLQ V2.
!   17-JAN-1997	V1.5	Madison	    Remove MDMLIB.
!   01-SEP-1997	V1.6	Madison	    MLE memory management change.
!    4-SEP-1997 V1.6-1	Goatley     Add "soft" quit to ignore mail sigs, etc.
!   15-SEP-1997 V1.6-2	Goatley     Ooops!  Allow whitespace in "soft" checks.
!   30-OCT-1997 V1.6-3	Goatley     Add new SFLAGS param to two calls.
!   14-JUL-1998	V1.6-4	Madison	    Remove unused WRITE_INFO reference.
!   13-NOV-1999	V1.7	Madison	    Handle quoted-printable messages.
!   20-FEB-2002 V1.7-1  Madison     Fix close of 0 unit.
!--
    LIBRARY 'SYS$LIBRARY:STARLET';
    LIBRARY 'MX_SRC_COMMON:FLQ';
    LIBRARY 'MX_SRC_COMMON:MX';
    LIBRARY 'MX_SRC_COMMON:AGENT';
    LIBRARY 'MX_SRC_COMMON:MX_LCLDEFS';
    LIBRARY 'MLF';

    FORWARD ROUTINE
    	LIST_CTRL_REQ;

    EXTERNAL ROUTINE
    	READ_MAILING_LIST,
    	WRITE_MAILING_LIST,
    	MLIST_PROCESS_CMD,
    	PARSE_REQ_CMD,
    	MLIST_ERROR,
    	MLIST_CTRL_ERROR,
    	MLF_OPEN_MSG_TEXT,
    	G_HAT (MX_FILE_READ, MX_FILE_CLOSE, MEM_FREEMLE),
    	G_HAT (QUOTE_STRING, WRITE_HDRS, FORMAT_HDR,
    	    PARSE_MBOX, PARSE_ADDRLIST, COPY_FILE, MX_VERSION,
    	    OPEN_MSG_TEXT, VERIFY_PHRASE, PARSE821, FORMAT821),
    	G_HAT (STR$COPY_R, STR$CASE_BLIND_COMPARE, STR$APPEND,
    	    STR$CONCAT, STR$PREFIX, STR$APPEND, STR$UPCASE, STR$RIGHT,
    	    STR$COMPARE_EQL, STR$COPY_DX, STR$DUPL_CHAR, STR$POSITION,
    	    LIB$SYS_FAO, LIB$FIND_FILE, LIB$FIND_FILE_END, LIB$DELETE_FILE,
    	    STR$TRIM, LIB$RENAME_FILE, LIB$GET_VM, LIB$FREE_VM);

    EXTERNAL
    	MLISTS	    : QUEDEF,
    	SYSUSERS    : QUEDEF,
    	CONFIG	    : CFGDEF;

    TRACE_DECLARATIONS (EXTERNAL);

    EXTERNAL LITERAL
    	MX__MAILLIST, MX__MLCTRL;

%SBTTL 'LIST_CTRL_REQ'
GLOBAL ROUTINE LIST_CTRL_REQ (QCTX, QENT_A, SENDER_A, MLST_A, HDRQ_A) = 
BEGIN
!++
! FUNCTIONAL DESCRIPTION:
!
!   Processes control messages for mailing lists:
!
!   	SUBSCRIBE or JOIN
!   	ADD addrspec	    	(from list owner or system user)
!   	UNSUBSCRIBE or SIGNOFF
!   	REMOVE addrspec	    	(from list owner or system user)
!   	REVIEW
!
!   If the control message is not one of the recognized types, the
!   message is passed verbatim to the list owner(s).
!
! RETURNS:  	cond_value, longword (unsigned), write only, by value
!
! PROTOTYPE:
!
!   LIST_CTRL_REQ
!
! IMPLICIT INPUTS:  None.
!
! IMPLICIT OUTPUTS: None.
!
! COMPLETION CODES:
!
!   SS$_NORMAL:	    	normal successful completion.
!
! SIDE EFFECTS:
!
!   None.
!--
    BIND
    	QENT	= .QENT_A   	: QENTDEF,
    	SENDER	= .SENDER_A 	: BLOCK [,BYTE],
    	HDRQ	= .HDRQ_A   	: QUEDEF,
    	MLST	= .MLST_A   	: MLSTDEF;

    LOCAL
    	TMPQ	: QUEDEF,
    	MLSTQ	: QUEDEF,
    	TMPQ2	: QUEDEF,
    	RTEQ	: QUEDEF,
    	FROMA2	: REF TXTDEF,
    	FROMHDR	: REF TXTDEF,
    	FROMADR	: REF TXTDEF,
    	TXT 	: REF TXTDEF,
    	MLE 	: REF MLEDEF,
    	STR 	: BLOCK [DSC$K_S_BLN,BYTE],
    	FROMSTR	: BLOCK [DSC$K_S_BLN,BYTE],
    	CMDSTR	: BLOCK [DSC$K_S_BLN,BYTE],
    	CMDPARMS: BLOCK [DSC$K_S_BLN,BYTE],
    	DOMP	: BLOCK [DSC$K_S_BLN,BYTE],
    	LCLP	: BLOCK [DSC$K_S_BLN,BYTE],
    	NAME	: BLOCK [DSC$K_S_BLN,BYTE],
    	qpfile	: BLOCK [DSC$K_S_BLN,BYTE],
    	NEWENT	: QENTDEF,
    	NOTIFY, FLAGS, SFLAGS,
    	CMDCODE,
    	CHANGED,
    	UNIT,
	valid,
	softquit,
	first_char,
    	STATUS;

    INIT_DYNDESC (STR, FROMSTR, DOMP, LCLP, NAME, CMDSTR, CMDPARMS, qpfile);
    INIT_QUEUE (TMPQ, MLSTQ, TMPQ2, RTEQ);

    FROMHDR = (LOCAL HDR : REF TXTDEF;
    	HDR = .HDRQ [QUE_L_HEAD];
    	WHILE .HDR NEQA HDRQ [QUE_L_HEAD] DO
    	BEGIN
    	    IF .HDR [TXT_W_CODE] EQL MX_K_HDR_FROM THEN EXITLOOP .HDR;
    	    HDR = .HDR [TXT_L_FLINK];
    	END);
    IF .FROMHDR EQL -1 THEN
    BEGIN
    	TRACE ('  LIST_CTRL_REQ:  No From: header in message.');
    	MLIST_ERROR (MLST, %ASCID'no From: header in message');
    	RETURN SS$_NORMAL;
    END;
    STR$COPY_R (STR, FROMHDR [TXT_W_LEN], FROMHDR [TXT_T_TEXT]);
    STATUS = PARSE_ADDRLIST (STR, TMPQ, 1);
    IF .STATUS THEN PARSE_ADDRLIST (STR, TMPQ2, 0)
    ELSE
    BEGIN
    	LOCAL
    	    TXT	    : REF TXTDEF,
    	    I;
    	WHILE NOT REMQUE (.TMPQ [QUE_L_HEAD], TXT) DO FREETXT (TXT);
    	IF (I = STR$POSITION (STR, %ASCID'<')) NEQ 0 THEN
    	BEGIN
    	    STR$RIGHT (FROMSTR, STR, I);
    	    STATUS = PARSE_ADDRLIST (FROMSTR, TMPQ, 1);
    	    IF .STATUS THEN PARSE_ADDRLIST (FROMSTR, TMPQ2, 0);
    	END;
    END;
    IF NOT .STATUS OR .TMPQ [QUE_L_HEAD] EQLA TMPQ [QUE_L_HEAD] THEN
    BEGIN
    	TRACE ('  LIST_CTRL_LISTSERV:  -- From: address invalid!!');
    	MLIST_ERROR (.MLST, %ASCID'invalid From: header in message');
    END
    ELSE
    BEGIN
    	LOCAL SDSC : BLOCK [DSC$K_S_BLN,BYTE];

    	REMQUE (.TMPQ [QUE_L_HEAD], FROMADR);
    	REMQUE (.TMPQ2 [QUE_L_HEAD], FROMA2);
    	WHILE NOT REMQUE (.TMPQ [QUE_L_HEAD], TXT) DO FREETXT (TXT);
    	WHILE NOT REMQUE (.TMPQ2 [QUE_L_HEAD], TXT) DO FREETXT (TXT);
    	INIT_SDESC (SDSC, .FROMA2 [TXT_W_LEN], FROMA2 [TXT_T_TEXT]);
    	IF PARSE821 (SDSC, RTEQ, LCLP, DOMP) THEN
    	BEGIN
    	    INIT_SDESC (SDSC, .FROMADR [TXT_W_LEN], FROMADR [TXT_T_TEXT]);
    	    PARSE_MBOX (SDSC, STR, STR, NAME)
    	END
    	ELSE
    	BEGIN
    	    INIT_SDESC (SDSC, .FROMADR [TXT_W_LEN], FROMADR [TXT_T_TEXT]);
    	    PARSE_MBOX (SDSC, LCLP, DOMP, NAME);
    	END;
    	IF .RTEQ [QUE_L_HEAD] NEQA RTEQ THEN
    	BEGIN
    	    FORMAT821 (RTEQ, LCLP, DOMP, FROMSTR);
    	    WHILE NOT REMQUE (.RTEQ [QUE_L_HEAD], TXT) DO FREETXT (TXT);
    	END
    	ELSE STR$CONCAT (FROMSTR, LCLP, %ASCID'@', DOMP);
    	VERIFY_PHRASE (NAME, NAME);
    	FREETXT (FROMADR);
    	FREETXT (FROMA2);
    END;
    TRACE ('  LIST_CTRL_REQ:  Message is from: !AS', FROMSTR);

    READ_MAILING_LIST (MLST, MLSTQ);
    CHANGED = 0;

!
!  There is some "magic" here.  To try to clarify the error messages
!  generated by mail signatures ("unknown command: xxxx"), etc., this
!  code will exit with QUIT is found, when an invalid line is
!  found after a blank line, or when a line beginning with a non-alphabetic
!  character is found.  This should catch most mail signatures, etc.,
!  while still allowing blank lines between multiple valid commands.
!
    valid = 0;		!Assume no valid commands
    softquit = 0;
    STATUS = MLF_OPEN_MSG_TEXT (QENT, UNIT, .hdrq_a, qpfile);
    IF NOT .STATUS THEN UNIT = 0
    ELSE WHILE 1 DO
    BEGIN
    	WHILE 1 DO
    	BEGIN
    	    IF .UNIT NEQ 0 THEN STATUS = MX_FILE_READ (.UNIT, STR);
    	    IF NOT .STATUS THEN EXITLOOP;
    	    STR$TRIM (STR, STR);
	    IF (.str [DSC$W_LENGTH] GTR 0)
	    THEN
		EXITLOOP
	    ELSE
		softquit = 1;		!Found a blank line, set "soft" QUIT
    	END;
    	IF NOT .STATUS THEN EXITLOOP;

	!
	!  Get the first character to be sure it's alphabetic, but skip
	!  over any whitespace at the beginning of the line.
	!
	first_char = 0;
	BEGIN
	    LOCAL ptr : REF VECTOR[,BYTE];
	    ptr = .str [DSC$A_POINTER];
	    INCR i FROM 0 TO .str [DSC$W_LENGTH]-1 DO
		BEGIN
		first_char = .ptr [.i];
		IF (.first_char NEQU %CHAR(32) AND
		    .first_char NEQU %CHAR(9))
		THEN EXITLOOP;
		END;
	END;

	!
	!  If line doesn't begin with alphabetic character, then force
	!  a "soft" quit.
	!
	IF .first_char NEQU 0 AND
	   ((.first_char LSSU %C'A') OR
	   ((.first_char GTRU %C'Z') AND
	    (.first_char LSSU %C'a')) OR
	    (.first_char GTRU %C'z'))
	THEN
	    BEGIN
	    status = 0;
	    softquit = 1;
	    END
	ELSE
	    !
	    !  Here, line begins with alphabetic character, so go parse it.
	    !
	    BEGIN
	    TRACE ('  LIST_CTRL_REQ: command is: !AS', STR);
	    STATUS = PARSE_REQ_CMD (STR, CMDCODE, CMDSTR, CMDPARMS, NOTIFY,
				    FLAGS, SFLAGS);
	    IF .CMDCODE EQL MLCMD__UNKNOWN THEN STATUS = 0;
	    IF .CMDCODE EQL MLCMD__QUIT THEN EXITLOOP ;
	    END;

	valid = .valid OR (.status AND 1);	!Any valid commands?

	IF NOT(.status) AND		!Invalid command
	   (.softquit) AND		!... following a blank line
	   (.valid)			!... and at least one valid command
	THEN
	    BEGIN
    	    TRACE ('  LIST_CTRL_REQ:  Invalid line, skipping rest.');
    	    LIB$SYS_FAO (%ASCID'found an invalid line, rest of this message ignored: !AS', 0, cmdstr, str);
    	    MLIST_ERROR (0, CMDSTR);
    	    STATUS = 0;
	    EXITLOOP;
	    END;

	softquit = 0;		!Ignore "soft" quit now

    	IF NOT .STATUS THEN
    	BEGIN
    	    TRACE ('  LIST_CTRL_REQ:  Unknown command.');
    	    LIB$SYS_FAO (%ASCID'  unknown command: !AS', 0, CMDSTR, STR);
    	    MLIST_ERROR (MLST, CMDSTR);
    	END
    	ELSE MLIST_PROCESS_CMD (MLST, MLSTQ, .CMDCODE, CMDPARMS,
    	    	    FROMSTR, NAME, SENDER, HDRQ, .QCTX, CHANGED, .NOTIFY,
		    .FLAGS, .SFLAGS);
    END;

    IF .UNIT NEQU 0 THEN
        MX_FILE_CLOSE (.UNIT);
    UNIT = 0;

    IF .CHANGED THEN WRITE_MAILING_LIST (MLST, MLSTQ);
    WHILE NOT REMQUE (.MLSTQ [QUE_L_HEAD], MLE) DO MEM_FREEMLE (MLE);
    IF .qpfile [DSC$W_LENGTH] NEQ 0 THEN LIB$DELETE_FILE (qpfile);
    FREE_STRINGS (STR, DOMP, LCLP, NAME, FROMSTR, CMDSTR, CMDPARMS, qpfile);

    SS$_NORMAL

END; ! LIST_CTRL_REQ

END
ELUDOM
