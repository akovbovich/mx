# mmsdefs.mms
#
# Common MMK definitions for MX builds.
#
.IFNDEF MX_TOP
MX_TOP	    	= MX
.ENDIF

MG_FACILITY 	= $(MX_TOP).$(MX_FACILITY)
MX_SRCTOP   	= MG_SRC:[$(MX_TOP)]
MX_SRC_COMMON	= MG_SRC:[$(MX_TOP).COMMON]
MX_SRC_FLQ  	= MG_SRC:[$(MX_TOP).FLQ]
MX_SRC_MCP  	= MG_SRC:[$(MX_TOP).MCP]
MX_SRC_SMTP 	= MG_SRC:[$(MX_TOP).SMTP]

.IFDEF __AXP__
L32 = .L32E
OPT = .ALPHA_OPT
.ENDIF
.IFDEF __I64__
L32 = .L32I
OPT = .IA64_OPT
.ENDIF

.SUFFIXES : $(L32) .H .R32 .REQ .MSG .ALPHA_OPT .IA64_OPT .ALPHA_OPT~ .IA64_OPT~ .DOC .DOC~ .DECW$BOOKSHELF .DECW$BOOKSHELF~ .TPU .TPU~

.R32$(L32) :
    $(BLISS)/LIBRARY=$(MMS$TARGET_NAME)$(L32) $(MMS$SOURCE)

.REQ$(L32) :
    $(BLISS)/LIBRARY=$(MMS$TARGET_NAME)$(L32) $(MMS$SOURCE)

.MSG.R32 :
    GENMSG/LANG=BLISS/OUT=$(MMS$TARGET_NAME).R32 $(MMS$SOURCE)

.MSG.H :
    GENMSG/LANG=C/OUT=$(MMS$TARGET_NAME).H $(MMS$SOURCE)

.ALPHA_OPT~.ALPHA_OPT :
	@ IF "$(MMS$CMS_LIBRARY)" .NES. "" THEN DEFINE/USER CMS$LIB $(MMS$CMS_LIBRARY)
	$(CMS) FETCH $(MMS$CMS_ELEMENT) /OUTPUT=$(MMS$TARGET_NAME).ALPHA_OPT $(CMSFLAGS) $(CMSCOMMENT)

.IA64_OPT~.IA64_OPT :
	@ IF "$(MMS$CMS_LIBRARY)" .NES. "" THEN DEFINE/USER CMS$LIB $(MMS$CMS_LIBRARY)
	$(CMS) FETCH $(MMS$CMS_ELEMENT) /OUTPUT=$(MMS$TARGET_NAME).IA64_OPT $(CMSFLAGS) $(CMSCOMMENT)

.DOC~.DOC :
	@ IF "$(MMS$CMS_LIBRARY)" .NES. "" THEN DEFINE/USER CMS$LIB $(MMS$CMS_LIBRARY)
	$(CMS) FETCH $(MMS$CMS_ELEMENT) /OUTPUT=$(MMS$TARGET_NAME).DOC $(CMSFLAGS) $(CMSCOMMENT)
.DECW$BOOKSHELF~.DECW$BOOKSHELF :
	@ IF "$(MMS$CMS_LIBRARY)" .NES. "" THEN DEFINE/USER CMS$LIB $(MMS$CMS_LIBRARY)
	$(CMS) FETCH $(MMS$CMS_ELEMENT) /OUTPUT=$(MMS$TARGET_NAME).DECW$BOOKSHELF $(CMSFLAGS) $(CMSCOMMENT)
.TPU~.TPU :
	@ IF "$(MMS$CMS_LIBRARY)" .NES. "" THEN DEFINE/USER CMS$LIB $(MMS$CMS_LIBRARY)
	$(CMS) FETCH $(MMS$CMS_ELEMENT) /OUTPUT=$(MMS$TARGET_NAME).TPU $(CMSFLAGS) $(CMSCOMMENT)

SRCDIR = MG_SRC:[$(MG_FACILITY)]
BINDIR = MG_BIN:[$(MG_FACILITY)]
BINVAX = MG_BIN_VAX:[$(MG_FACILITY)]
BINAXP = MG_BIN_AXP:[$(MG_FACILITY)]
BINI64 = MG_BIN_I64:[$(MG_FACILITY)]
ETCDIR = MG_ETC:[$(MG_FACILITY)]
KITDIR = MG_KIT:[$(MG_FACILITY)]
CMSDIR = MG_CMS:[$(MG_FACILITY)]
UTLDIR = MG_TOOLS:
MG_TOOLS = MG_TOOLS:

LINKFLAGS = $(LINKFLAGS)/MAP=$(ETCDIR)$(MMS$TARGET_FNAME)/CROSS/FULL
.IFDEF LIS
CFLAGS = $(CFLAGS)/LIST=$(ETCDIR)$(MMS$TARGET_FNAME)/MACHINE$(LISFLAGS)
MFLAGS = $(MFLAGS)/LIST=$(ETCDIR)$(MMS$TARGET_FNAME)$(LISFLAGS)
BFLAGS = $(BFLAGS)/LIST=$(ETCDIR)$(MMS$TARGET_FNAME)$(LISFLAGS)
.ENDIF

.IFDEF DBG
CFLAGS = $(CFLAGS)/DEBUG
MFLAGS = $(MFLAGS)/DEBUG
BFLAGS = $(BFLAGS)/DEBUG$(DBGFLAGS)
.IFDEF __I64__
BFLAGS = $(BFLAGS)/NOOPT
.ENDIF
LINKFLAGS = $(LINKFLAGS)/DEBUG/DSF=$(MMS$TARGET_NAME)
.ENDIF

{$(SRCDIR)}.C{$(BINDIR)}.OBJ :
{$(SRCDIR)}.B32{$(BINDIR)}.OBJ :
{$(SRCDIR)}.MAR{$(BINDIR)}.OBJ :
{$(SRCDIR)}.MSG{$(BINDIR)}.OBJ :
{$(SRCDIR)}.CLD{$(BINDIR)}.OBJ :
{$(SRCDIR)}.RNH{$(KITDIR)}.HLP :
{$(SRCDIR)}.RNO{$(KITDIR)}.MEM :
{}.B32~{$(SRCDIR)}.B32 :
{}.R32~{$(SRCDIR)}.R32 :
{}.C~{$(SRCDIR)}.C :
{}.H~{$(SRCDIR)}.H :
{}.MAR~{$(SRCDIR)}.MAR :
{}.MAC~{$(SRCDIR)}.MAC :
{}.M64~{$(SRCDIR)}.M64 :
{}.MSG~{$(SRCDIR)}.MSG :
{}.CLD~{$(SRCDIR)}.CLD :
{}.OPT~{$(SRCDIR)}.OPT :
{}.ALPHA_OPT~{$(SRCDIR)}.ALPHA_OPT :
{}.IA64_OPT~{$(SRCDIR)}.IA64_OPT :
{}.SDML~{$(SRCDIR)}.SDML :
{}.RNO~{$(SRCDIR)}.RNO :
{}.RNH~{$(SRCDIR)}.RNH :
{}.COM~{$(SRCDIR)}.COM :
{}.MMS~{$(SRCDIR)}.MMS :
{}.TXT~{$(SRCDIR)}.TXT :
{}.DAT~{$(SRCDIR)}.DAT :
{}.DOC~{$(SRCDIR)}.DOC :
{}.DECW$BOOKSHELF~{$(SRCDIR)}.DECW$BOOKSHELF :
{}.TPU~{$(SRCDIR)}.TPU :

.FIRST
    @ IF F$PARSE("$(BINDIR)") .EQS. "" THEN CREATE/DIRECTORY $(BINDIR)
    @ IF F$PARSE("$(ETCDIR)") .EQS. "" THEN CREATE/DIRECTORY $(ETCDIR)
    @ IF F$PARSE("$(KITDIR)") .EQS. "" THEN CREATE/DIRECTORY $(KITDIR)
    @ DEFINE/NOLOG SRC_DIR $(SRCDIR)
    @ DEFINE/NOLOG BIN_DIR $(BINDIR)
    @ DEFINE/NOLOG ETC_DIR $(ETCDIR)
    @ DEFINE/NOLOG KIT_DIR $(KITDIR)
    @ DEFINE/NOLOG MX_SRCTOP   	    $(MX_SRCTOP)
    @ DEFINE/NOLOG MX_SRC_COMMON    $(MX_SRC_COMMON)
    @ DEFINE/NOLOG MX_SRC_FLQ  	    $(MX_SRC_FLQ)
    @ DEFINE/NOLOG MX_SRC_MCP  	    $(MX_SRC_MCP)
    @ DEFINE/NOLOG MX_SRC_SMTP 	    $(MX_SRC_SMTP)
    @ DEFINE/NOLOG MX_BIN_COMMON    MG_BIN:[$(MX_TOP).COMMON]
    @ DEFINE/NOLOG MX_BIN_FLQ  	    MG_BIN:[$(MX_TOP).FLQ]
    @ IF F$TYPE(PKZIP) .NES. "" THEN ZIP = PKZIP

BFLAGS	    = $(BFLAGS)/VARIANT="$(VAR)"

MXSHROPT    = $(MX_SRCTOP)MX_SHR.OPT/OPT
FLQSHROPT   = $(MX_SRCTOP)MX_FLQ_SHR.OPT/OPT
NETLIBOPT   = $(MX_SRCTOP)NETLIB.OPT/OPT
MXLIB	    = MG_BIN:[$(MX_TOP).COMMON]COMMON.OLB/LIB
MXSHRLIB    = MG_BIN:[$(MX_TOP).COMMON]MX_SHR.OLB/LIB
FLQLIB	    = MG_BIN:[$(MX_TOP).FLQ]MX_FLQ_SHR.OLB/LIB
VERSION	    = $(MX_SRCTOP)VERSION.OPT/OPT

STDOPTS	    = $(MXSHROPT),$(FLQSHROPT),$(VERSION),$(MXLIB)

AGENT	    = $(MX_SRC_COMMON)AGENT$(L32),-
    	      $(MX_SRC_COMMON)STATUS$(L32),-
    	      $(MX_SRC_COMMON)IPC$(L32)

{$(MX_SRC_COMMON)}.R32{$(MX_SRC_COMMON)}$(L32) :
{$(MX_SRC_FLQ)}.R32{$(MX_SRC_FLQ)}$(L32) :

.IFDEF PKZIP
ZIP = PKZIP
.ENDIF

.IFDEF KITNAME

PRIMARY_TARGET : $(PRIMARY_TARGET)
    @ !

KIT : $(KITDIR)$(KITNAME)
    @ !

$(KITDIR)$(KITNAME) : DISTRIBUTION, SOURCE
    @ IF F$SEARCH("$(MMS$TARGET)") .NES. "" THEN DELETE $(MMS$TARGET);*
    @ olddef = F$ENV("DEFAULT")
    @ SET DEFAULT DIST_ROOT:[DIST]
    @ PURGE [...]*.*
    $(ZIP)/VMS/RECURS $(MMS$TARGET) *.*
    @ SET DEFAULT 'olddef'
    @ TREDEL $(KITDIR)DIST.DIR

DISTRIBUTION : DIST_PREP, DIST_TOP, DIST_DOC, DIST_VAX, DIST_AXP, DIST_I64
    @ !

DIST_PREP :
    @ IF F$SEARCH("$(KITDIR)DIST.DIR") .NES. "" THEN TREDEL $(KITDIR)DIST.DIR
    @ olddef = F$ENV("DEFAULT")
    @ IF "$(KITDIR)" .NES. "" THEN SET DEFAULT $(KITDIR)
    @ CREATE/DIRECTORY [.DIST],[.DIST.DOC],[.DIST.BIN-VAX],[.DIST.BIN-AXP],[.DIST.SOURCE]
    @ SET DEFAULT 'olddef
    @ ROOT = F$PARSE("$(KITDIR)DIST.DIR",,,"DEVICE","NO_CONCEAL")+F$PARSE("$(KITDIR)DIST.DIR",,,"DIRECTORY","NO_CONCEAL")-"]["-"]"+".]"
    @ DEFINE DIST_ROOT 'ROOT'/TRANSLATION=CONCEAL
.ENDIF
#  Copyright (c) 2008, Matthew Madison.
#  
#  All rights reserved.
#  
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#  
#      * Redistributions of source code must retain the above
#        copyright notice, this list of conditions and the following
#        disclaimer.
#      * Redistributions in binary form must reproduce the above
#        copyright notice, this list of conditions and the following
#        disclaimer in the documentation and/or other materials provided
#        with the distribution.
#      * Neither the name of the copyright owner nor the names of any
#        other contributors may be used to endorse or promote products
#        derived from this software without specific prior written
#        permission.
#  
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
#  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
